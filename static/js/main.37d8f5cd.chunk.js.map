{"version":3,"sources":["components/ToggleColumns.js","components/ProductList.js","components/FilterForm.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["ToggleColumns","onCheckboxClick","column","e","props","target","checked","className","Object","keys","this","columns","map","index","key","type","onClick","bind","defaultChecked","Component","ProductList","visible_columns","filter","item","products__headers","products__items","values","products","val","product_values","id","length","FilterForm","onPriceInputChange","name","value","htmlFor","placeholder","priceFrom","onChange","priceTo","Search","setState","filterProducts","min_price","state","max_price","new_columns","department","currency","price","displayedProducts","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.37d8f5cd.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class ToggleColumns extends Component {\n  \n  onCheckboxClick = (column)=> (e) => {\n    this.props.onCheckboxClick(column, e.target.checked);\n  }\n  \n  render() {\n    return (\n      <div className=\"toggle-columns\">\n        {/* Bind handlers and props */}\n        { \n          Object.keys(this.props.columns).map((column, index) => {\n            return ( \n            <div key={index}>\n              <label>\n                {column}\n              </label>\n              <input\n                type=\"checkbox\" \n                onClick={this.onCheckboxClick.bind(this)(column)} \n                defaultChecked={this.props.columns[column]}/>\n            </div>)\n          })\n        }\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class ProductList extends Component {\n\n  render() {\n\n    let visible_columns=Object.keys(this.props.columns).filter(item => this.props.columns[item]);\n\n    let products__headers = visible_columns.map((column, index) => {\n      return (<th key={index}>{column}</th>)\n    });\n\n    let products__items =  Object.values(this.props.products).map((val, index) => {            \n      const product_values = visible_columns.map((column, index) => {\n          return (<td key={index}>{val[column]}</td>)\n      });\n      return(\n        <tr key={index}>\n          {product_values}\n        </tr>\n      )\n    });\n\n    return (\n        \n      <div id=\"product-list\">\n        <header>\n          <strong>Product List ({this.props.products.length} items)</strong>\n        </header>\n        <table>\n          <thead>\n            <tr>\n              {products__headers}\n            </tr>\n          </thead>\n          <tbody>\n            {/* Display products here in new table rows */} \n            {products__items}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class FilterForm extends Component {\n\n  onPriceInputChange = (name)=> (e) => {\n    this.props.onPriceInputChange(name, e.target.value);\n  }\n\n  render() {\n    return (\n      <div>\n        {/* Bind handlers and props */}\n        <label htmlFor=\"name\">Filter:</label>\n        <input\n          type=\"number\"\n          name=\"priceFrom\"\n          placeholder=\"Price from...\"\n          value = {this.props.priceFrom} \n          onChange={this.onPriceInputChange.bind(this)(\"priceFrom\")}/>\n        <input\n          type=\"number\"\n          name=\"priceTo\"\n          placeholder=\"Price to...\" \n          value = {this.props.priceTo} \n          onChange={this.onPriceInputChange.bind(this)(\"priceTo\")}/>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport '../styles/Search.css';\nimport ToggleColumns from './ToggleColumns';\nimport ProductList from './ProductList';\nimport FilterForm from './FilterForm';\n\nexport default class Search extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      priceFrom: '',\n      priceTo: '',\n      columns: {\n        id: true,\n        name: true,\n        department: true,\n        currency: true,\n        price: true\n      }\n    };\n\n    this.onCheckboxClick = this.onCheckboxClick.bind(this); \n    this.onPriceInputChange = this.onPriceInputChange.bind(this); \n  }\n\n  onPriceInputChange = (name, value) => {\n    if (name==='priceTo') {\n      this.setState({'priceTo': value});\n    } else if (name==='priceFrom') {\n      this.setState({'priceFrom': value});\n    }\n  }\n\n  filterProducts = (products) => {\n    // to-do: implement handler for filtering products by price range\n    let min_price = this.state.priceFrom === '' ? 0 : this.state.priceFrom;\n    let max_price = (this.state.priceTo === '') || (this.state.priceTo === 0) ? ((2**31)-1) : this.state.priceTo;\n\n    if (min_price>max_price) return products;\n    \n    return Object.values(products).filter(val => val['price'] >= min_price && val['price'] <= max_price)\n  }\n\n  onCheckboxClick = (name, checked) => {\n    let new_columns = this.state.columns;\n    new_columns[name] = checked;\n    this.setState({'columns': new_columns});\n  }\n\n  render() {\n\n    let displayedProducts = this.filterProducts(this.props.products);\n\n    return (\n      <div className=\"Products\">\n        <FilterForm\n          priceFrom={this.state.priceFrom}\n          priceTo={this.state.priceTo}\n          onPriceInputChange={this.onPriceInputChange} />\n\n        <ToggleColumns\n          onCheckboxClick={this.onCheckboxClick}\n          columns={this.state.columns} />\n\n        <ProductList\n          products={displayedProducts}\n          columns={this.state.columns} />\n      </div>\n    );\n  }\n}\n","import React from 'react'\n\nimport Search from './components/Search'\nimport products from './assets/products.json';\n\nconst App = () => {\n  return <Search products={products} />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}